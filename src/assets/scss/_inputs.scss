@use 'sass:map';
@use 'variables';
@use 'helpers';

// stylelint-disable selector-no-qualifying-type

//
// Base styles
//

.chaise-input-group {
  position: relative;
  display: flex;
  flex-wrap: wrap; // For form validation feedback
  align-items: stretch;
  width: 100%;

  > .chaise-input-control,
  > .chaise-form-select,
  > .chaise-form-file {
    position: relative; // For focus state's z-index
    flex: 1 1 0%;
    min-width: 0; // https://stackoverflow.com/questions/36247140/why-dont-flex-items-shrink-past-content-size
    margin-bottom: 0;

    + .chaise-input-control,
    + .chaise-form-select,
    + .chaise-form-file {
      margin-left: variables.$btn-border-width * -1;
    }
  }

  > .chaise-input-control,
  > .chaise-form-select {
    &:not(:last-child) {
      @include helpers.border-right-radius(0);
    }
    &:not(:first-child) {
      @include helpers.border-left-radius(0);
    }
  }

  // Custom file inputs have more complex markup, thus requiring different
  // border-radius overrides.
  > .chaise-form-file {
    display: flex;
    align-items: center;

    &:not(:last-child) .chaise-form-file-label {
      @include helpers.border-right-radius(0);
    }
    &:not(:first-child) .chaise-form-file-label {
      @include helpers.border-left-radius(0);
    }
  }

  // Prepend and append
  //
  // While it requires one extra layer of HTML for each, dedicated prepend and
  // append elements allow us to 1) be less clever, 2) simplify our selectors, and
  // 3) support HTML5 form validation.

  .chaise-input-group-prepend,
  .chaise-input-group-append {
    display: flex;

    // Ensure buttons are always above inputs for more visually pleasing borders.
    // This isn't needed for `.chaise-input-group-text` since it shares the same border-color
    // as our inputs.
    .chaise-btn {
      position: relative;
      z-index: map-get(variables.$z-index-map, 'input-group-append-btn'); // should be above input even if input is focused
      @include helpers.border-left-radius(0);

      &:focus {
        z-index: map-get(variables.$z-index-map, 'input-group-append-btn-focus');
      }
    }

    .chaise-btn + .chaise-btn,
    .chaise-btn + .chaise-input-group-text,
    .chaise-input-group-text + .chaise-input-group-text,
    .chaise-input-group-text + .chaise-btn {
      margin-left: variables.$btn-border-width * -1;
    }
  }

  .chaise-input-group-prepend {
    margin-right: variables.$btn-border-width * -1;
  }
  .chaise-input-group-append {
    margin-left: variables.$btn-border-width * -1;
  }
}

// Prepend and append rounded corners
//
// These rulesets must come after the sizing ones to properly override sm and lg
// border-radius values when extending. They're more specific than we'd like
// with the `.chaise-input-group >` part, but without it, we cannot override the sizing.

.chaise-input-group > .chaise-input-group-prepend > .chaise-btn,
.chaise-input-group > .chaise-input-group-prepend > .chaise-input-group-text,
.chaise-input-group > .chaise-input-group-append:not(:last-child) > .chaise-btn,
.chaise-input-group > .chaise-input-group-append:not(:last-child) > .chaise-input-group-text,
.chaise-input-group > .chaise-input-group-append:last-child > .chaise-btn:not(:last-child):not(.dropdown-toggle),
.chaise-input-group > .chaise-input-group-append:last-child > .chaise-input-group-text:not(:last-child) {
  @include helpers.border-right-radius(0);
}

.chaise-input-group > .chaise-input-group-append > .chaise-btn,
.chaise-input-group > .chaise-input-group-append > .chaise-input-group-text,
.chaise-input-group > .chaise-input-group-prepend:not(:first-child) > .chaise-btn,
.chaise-input-group > .chaise-input-group-prepend:not(:first-child) > .chaise-input-group-text,
.chaise-input-group > .chaise-input-group-prepend:first-child > .chaise-btn:not(:first-child),
.chaise-input-group > .chaise-input-group-prepend:first-child > .chaise-input-group-text:not(:first-child) {
  @include helpers.border-left-radius(0);
}

// Textual addons
//
// Serves as a catch-all element for any text or radio/checkbox input you wish
// to prepend or append to an input.
.chaise-input-group-text {
  display: flex;
  align-items: center;
  padding: variables.$btn-padding-y variables.$btn-padding-x;
  margin-bottom: 0; // Allow use of <label> elements by overriding our default margin-bottom
  font-size: 1rem;
  color: map-get(variables.$color-map, 'black');
  text-align: center;
  white-space: nowrap;
  background-color: map-get(variables.$color-map, 'table-striped-background');
  border: variables.$btn-border-width solid map-get(variables.$color-map, 'border');
  @include helpers.border-radius(variables.$btn-border-radius);

  // dt meaning "datetime"
  &.dt-width {
    width: 50px;
  }

  // Nuke default margins from checkboxes and radios to vertically center within.
  input[type='radio'],
  input[type='checkbox'] {
    margin-top: 0;
  }
}

.chaise-boolean-dropdown {
  .chaise-input-control.has-feedback {
    padding-right: variables.$input-remove-width + variables.$btn-height;

    .chaise-input-control-feedback {
      cursor: pointer;
      right: 35px;
    }

    .chaise-btn {
      position: absolute;
      top: -1px;
      right: -1px;
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }
  }
}

//
// Textual form controls
//

.chaise-input-control {
  display: block;
  width: 100%;
  height: variables.$btn-height;
  min-height: variables.$btn-height;
  padding: variables.$btn-padding-y variables.$btn-padding-x;
  background-color: map-get(variables.$color-map, 'white');
  background-clip: padding-box;
  border: variables.$btn-border-width solid map-get(variables.$color-map, 'border');

  @include helpers.border-radius(variables.$btn-border-radius);

  position: relative;
  input {
    outline: 0;
    padding: 0;
    margin: 0;
    border: 0;
    height: 100%;
    width: 100%;
  }

  // Unstyle the caret on `<select>`s in IE10+.
  &::-ms-expand {
    background-color: transparent;
    border: 0;
  }

  // Customize the `:focus` state to imitate native WebKit styles.
  &:focus {
    // color: $input-focus-color;
    // background-color: $input-focus-bg;
    // border-color: $input-focus-border-color;
    outline: 0;
    // Avoid using mixin so we can pass custom focus shadow properly
    // @if $enable-shadows {
    //   box-shadow: $input-box-shadow, $input-focus-box-shadow;
    // } @else {
    //   box-shadow: $input-focus-box-shadow;
    // }
  }

  // Placeholder
  &::placeholder,
  input::placeholder {
    color: map-get(variables.$color-map, 'placeholder');
    // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526.
    opacity: 1;
  }

  // Disabled and read-only inputs
  //
  // HTML5 says that controls under a fieldset > legend:first-child won't be
  // disabled if the fieldset is disabled. Due to implementation difficulty, we
  // don't honor that edge case; we style them as disabled anyway.
  &:disabled,
  &[disabled],
  &[readonly],
  &[readonly][disabled],
  &.input-disabled {
    background-color: map-get(variables.$color-map, 'disabled-background');
    border-color: map-get(variables.$color-map, 'disabled-background');
    color: map-get(variables.$color-map, 'disabled');
    // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
    opacity: 1;
    cursor: not-allowed;

    // make sure the input is taking the input-disabled styles and not the default bootstrap/browser ones
    // (using * so it selects input, textarea, or any other HTML element that we might have
    *::placeholder, *:disabled {
      background-color: inherit;
      color: inherit;
      cursor: inherit;
    }

    .chaise-input-placeholder {
      color: map-get(variables.$color-map, 'disabled');
    }
  }

  &.has-feedback {
    padding-right: variables.$input-remove-width;
  }

  // form-control:focus changes the z-index of the form control from 2 to 3.
  // use z index 5 so it isn't hidden when focused
  .chaise-input-control-feedback {
    z-index: map-get(variables.$z-index-map, 'input-control-feedback');
    color: map-get(variables.$color-map, 'black');
    position: absolute;
    right: 0;
    top: 5px;
    width: variables.$input-remove-width;
    text-align: center;

    .remove-input-btn {
      cursor: pointer;
      pointer-events: all;
    }
  }

  // adds a grey placeholder into text fields (divs) that aren't editable
  // NOTE: cannot be used for `input` tags or placeholders with HTML
  div[contenteditable='false']:empty:not(:focus):before {
    content: attr(data-placeholder); // required data-placeholder being present
    color: map-get(variables.$color-map, 'placeholder');
  }

  // adds a grey placeholder into input fields (inputs) that are also editable
  // NOTE: should be prefered for placeholders with HTML
  .chaise-input-placeholder {
    position: absolute;
    top: variables.$btn-padding-y;
    left: variables.$btn-padding-x;
    color: map-get(variables.$color-map, 'placeholder');

    // show ellipsis if there aren't enough space:
    width: calc(100% - 10px); // we have to account for the padding-left of .button-text
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
    vertical-align: middle;

    // users should not be able to select the tooltip
    user-select: none;
    -moz-user-select: none;
    -webkit-user-select: none;
    -ms-user-select: none;
  }

  & + .chaise-input-group-append > label {
    margin-bottom: 0px;

    .button-text {
      padding-left: 10px;
    }
  }
}

// Form control sizing
//
// Build on `.chaise-input-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// Repeated in `_input_group.scss` to avoid Sass extend issues.
.chaise-input-group-text-sm {
  height: variables.$btn-height-sm;
  min-height: variables.$btn-height-sm;
  padding: variables.$btn-padding-y variables.$btn-padding-x;
}

.chaise-input-control-sm {
  height: variables.$btn-height-sm;
  min-height: variables.$btn-height-sm;
  padding: variables.$btn-padding-y variables.$btn-padding-x;

  @include helpers.border-radius(variables.$btn-border-radius);
}

.chaise-input-control-lg {
  height: variables.$btn-height;
  min-height: variables.$btn-height;
  padding: variables.$btn-padding-y variables.$btn-padding-x;

  @include helpers.border-radius(variables.$btn-border-radius);
}

.chaise-input-hidden {
  display: none !important;
}
