@use 'sass:map';
@use 'variables';
@use 'helpers';

// From _recordedit-app.scss
.recordedit-container {
  .btn-sm[data-handler="bootstrap-markdown-cmdRidLink"] {
    padding: 5px 3px;
  }

  .form-controls {
    display: flex;
    align-items: flex-end;
    padding-top: 10px;
    padding-bottom: 10px;

    .add-forms {
      width: auto;
      margin-left: auto;

      .chaise-input-group {
        width: auto;

        .add-rows-input {
          width: 45px;
          padding-left: 5px;
          padding-right: 5px;
        }
      }

      #recordedit-add-more {
        margin-left: 10px;
      }
    }
  }

  .main-body {
    display: flex;
    flex-direction: row;
    width: 100%;
    position: relative;
    padding-top: 15px;
    // padding at bottom of page so edit form isn't touching the bottom of viewport
    // padding instead of margin so it doesn't mess with scrollable area
    padding-bottom: 40px;

    .entity-key-column {
      display: flex;
      flex-direction: column;
      flex-shrink: 0;

      .entity-key {
        width: variables.$chaise-caption-column-width;
        border-left: variables.$chaise-RE-border-width solid map.get(variables.$color-map, 'recordedit-border');
        border-right: variables.$chaise-RE-border-width solid map.get(variables.$color-map, 'recordedit-border');
        border-bottom: variables.$chaise-RE-border-width solid map.get(variables.$color-map, 'recordedit-border');
        // margin-left: 10px;
        background: white;
        padding: 8px;

        min-height: 47px;

        flex: none;
        position: relative;

        &.with-multi-form-toggle {
          padding-right: 45px;
        }

        .toggle-multi-form-btn {
          position: absolute;
          right: 5px;
          top: 8px;
        }
      }
    }

    .form-container {
      width: 100%;
      height: 100%;
      overflow-x: hidden;

    }

    .recordedit-form {
      position: relative;
      display: flex;
      flex-direction: column;
      color: map.get(variables.$color-map, 'black');
      background-color: map.get(variables.$color-map, 'white');
      min-width: 250px;
      overflow-x: auto;

      &.dropdown-open {
        // max height of a dropdown is `399px`
        //    <search-row.height> + <dropdown-list.padding-top> + <dropdown-list.height> + <dropdown-menu.padding-bottom>
        // if dropdown is last input row, it won't overflow the parent container's height and be truncated
        // special case can occur when there are very few values to set (id + 1 foreign key in create mode)
        padding-bottom: 400px;
      }

      .form-header-row {
        display: flex;
        /**
         * the following ensures the row reports the correct width. without this, the reported with only inlcudes the visible
         * portion of the row (doesn't report the scrollable width).
         * We need the reported with to be the same as the scrollable width so that the logic for the sticky scrollbar can
         * detect width changes as the user adds or removes forms.
         */
        width: fit-content;
        // without the following, the row will not expand to the full width of the container
        min-width: 100%;
      }

      .form-inputs-row {
        display: flex;
        flex-direction: column;
        // make sure the form is stretched in one-input case
        min-width: 100%;
        // make sure the width is the same as the scrollable width in multi-input case
        width: fit-content;
        width: -moz-fit-content;
        width: -webkit-fit-content;
        // the rule below added for chaise-image-preview functionality
        max-width: 100%;

        &.highlighted-row {
          background-color: map.get(variables.$color-map, 'recordedit-highlighted-row');

          // reset the changed height when the multi form input row is open
          .inputs-row {
            min-height: unset;
          }
        }

        &.highlighted-row, &.with-inline-tooltip {
          // We add this so that the multi-form-input-row and inline-comment-row span across the entire view
          max-width: none;
        }

        .inputs-row {
          min-height: inherit; // the min-height of the parent row element can be changed if the key column has a taller height than the form row. We want to inherit that changed element's height value
          display: flex;
          flex-direction: row;

          // adding an overlay on top of form to add the click event
          .clickable-form-overlay {
            width: 100%;
            cursor: pointer;
            // This rule is to overwrite cursor:not-allowed for toolbar.
            .chaise-btn-toolbar, .dropdown {
              pointer-events: none;
            }
          }
        }

        .inline-comment-row, .multi-form-input-row {
          width: 100%;
          display: flex;
          gap: 5px;
          // Making it sticky so that it is fixed in its position and rest of the form conatiner scrolls horizontally
          position: sticky;
          top: 0;
          left: 0;
        }

        .inline-comment-row {
          flex-direction: column;

          color: map.get(variables.$color-map, 'column-inline-tooltip');
          border-right: variables.$chaise-RE-border-width solid map.get(variables.$color-map, 'recordedit-border');

          padding: 8px 10px 0 8px;

          .inline-tooltip {
            max-width: variables.$re-max-allowed-input-width;
          }
          hr {
            margin-top: 0;
            margin-bottom: 0;
          }
        }

        .multi-form-input-row {
          flex-grow: 1; // fill the space in case of a really tall row because the column name is long in the KeyColumn element (entity-key)
          flex-direction: column;
          align-items: center;

          z-index: map.get(variables.$z-index-map, 'multi-form-input-row');

          // Adding a div to align the content center always
          .center-align {
            width: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            gap: 5px;
            max-width: 100%;
            &.center-align-textarea {
              width: auto;
            }
          }
          .multi-form-upper-row {
            display: flex;
            width: 100%;
            justify-content: space-between;

            .multi-form-input-checkbox-container {
              display: flex;
              align-items: center;
              cursor: pointer;

              .multi-form-input-checkbox {
                display: flex;
                align-items: center;
                cursor: pointer;
                .checkbox-label {
                  cursor: pointer;
                }
              }
              .multi-form-input-how-to {
                cursor: default;
                color: map.get(variables.$color-map, 'black');
              }

              .multi-form-input-how-to:hover {
                z-index: auto !important;
              }
            }

            .multi-form-input-button-container {
              /**
              * We are aligning the buttons always to the right of the container so that when the width is less it always
              * aligns to the top right in the first row
              */
              text-align: right;
            }
          }

          .multi-form-input {
            width: 100%;

            // We follow the min-width given for multi-form-input-row which is 250px
            textarea {
              resize: both;
              min-width: 250px;
              max-width: 100%;
            }
          }
        }

        /**
          * We are adding this rule to center align the input area when the screen resolution is greater than 1800px.
          * We also give a width to the input area of 1200px.
        */
        @media (min-width: 1800px) {
          .multi-form-input-row {
            .center-align {
              width: variables.$re-max-allowed-input-width;
            }

            .center-align-textarea {
              width: auto;
            }

            .multi-form-input {
              // added so the spinner and backdrop only cover the input.
              // if we want to cover the whole multi form row, move this to .multi-form-row
              position: relative;
              textarea {
                width: variables.$re-max-allowed-input-width;
                max-width: 100%;
              }
            }

            .multi-form-input-textarea {
              width: 100%;
            }
          }

        }

        @media (max-width: 1799px) {
          .multi-form-input-row {
            .multi-form-input-input {
              width: 100%;

              textarea {
                max-width: 100%;
              }
            }
          }
        }
      }

      // form header and form inputs
      .entity-value {
        // make sure the inputs take up as much space as they can
        // and are the same size
        flex: 1 1 0;
        position: relative;

        .column-permission-overlay {
          position: absolute;
          left: 0;
          top: 0;
          height: 100%;
          width: 100%;
          z-index: map.get(variables.$z-index-map, 'recordedit-foreignkey-input-spinner-backdrop')
        }

        .column-permission-warning {
          margin: 0;
          padding: 5px;
          color: map.get(variables.$color-map, 'recordedit-column-permission-warning');
        }
      }

      .entity-value,
      .match-entity-value {
        word-wrap: break-word;
        min-width: 250px;
        border-right: variables.$chaise-RE-border-width solid map.get(variables.$color-map, 'recordedit-border');
        border-bottom: variables.$chaise-RE-border-width solid map.get(variables.$color-map, 'recordedit-border');

        // border-left: none;
        // border-top: none;

        border-radius: 0;
        min-height: 47px;
        padding: 8px 10px;
      }

      // This is added to show the form is selected to apply the change
      .entity-active {
        outline: 2px solid map.get(variables.$color-map, 'primary');
        outline-offset: -2px;
      }

      // only form inputs
      .column-cell {
        border-left: none;
        border-top: none;
        border-right: variables.$chaise-RE-border-width solid map.get(variables.$color-map, 'recordedit-border');
        border-bottom: variables.$chaise-RE-border-width solid map.get(variables.$color-map, 'recordedit-border');
        border-radius: 0;
        // height: 47px;
        min-height: 47px;
        padding: 8px 10px;

        .chaise-input-control.column-cell-input {
          border: 1px solid map.get(variables.$color-map, 'border');
          border-radius: 4px;
          padding: 0 10px;
          display: flex;
          align-items: center;

          .input-switch {
            height: auto;
          }
        }
      }
    }

    // in both entity-key-column and form
    .form-header {
      height: 47px;
      border-top: variables.$chaise-RE-border-width solid map.get(variables.$color-map, 'recordedit-border');
      color: map.get(variables.$color-map, 'disabled');

      .form-header-buttons-container {
        float: right;

        .remove-form-btn {
          padding: 1px 7px 0px 7px;
        }

        .disabled-row-icon {
          margin-right: 10px;
          font-size: 1.3em;
          vertical-align: middle;
        }
      }
    }
  }

  .modal-popup {
    width: 100%;
    margin-bottom: 0px;
  }

  .record-number {
    font-size: 14px;
    margin-left: 10px;
    color: map.get(variables.$color-map, 'disabled');
  }

  .chaise-input-control[readonly] {
    background-color: map.get(variables.$color-map, 'white');
    opacity: 1;
  }

  textarea,
  .disabled-textarea {
    resize: vertical;
    height: auto;
  }

  .input-timestamptz {
    min-width: 112px;
  }

  .adjust-boolean-dropdown {
    border-top: 0;
  }

  @-moz-document url-prefix() {
    #form-edit>table>tbody>tr>td:first-child {
      margin-top: -1px;
    }
  }

  .resultset-tables {
    padding-top: 10px;
    padding-bottom: 20px;
  }

  .bottom-panel-container {
    // this is needed for position fixed to work (https://stackoverflow.com/a/38796408)
    transform: translateZ(0);

    .form-container .chaise-table-top-scroll-wrapper {
      // we want the scrollbar to be always be displayed above the form
      position: fixed;
      // the react code will change the height if we're supposed to show it.
      height: 0;
    }
  }
}
