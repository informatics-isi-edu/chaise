@use 'sass:map';
@use 'variables';

.chaise-dropdown {
  display: inline-block;
  position: relative;

  .dropdown-menu > li > a.chaise-dropdown-header,
  .dropdown-menu > li > div > div > a.chaise-dropdown-header,
  .chaise-dropdown-header {
    padding: 3px 15px 3px 15px;
    cursor: default;
    font-size: variables.$font-size;
    color: map-get(variables.$color-map, 'black');
    font-weight: 600;
  }

  .dropdown-submenu {
    position: relative;
  }

  .dropdown-submenu > .dropdown-menu,
  .dropdown-submenu > div > div > .dropdown-menu {
    // TODO: why is this here? Maybe to fix positioning of menus for scrolling?
    // position: fixed;
    margin-top: -6px;
    margin-left: -1px;
  }

  .dropdown-submenu > a:after,
  .dropdown-submenu > div > div > a:after {
    display: flex;
    content: ' ';
    float: right;
    width: 0;
    height: 0;
    border-color: transparent;
    border-style: solid;
    border-width: 6px 0 6px 6px;
    /* was 5px 0 5px 5px */
    border-left-color: map-get(variables.$color-map, 'navbar-dropdown-submenu-icon');
    // to center
    margin: auto;
    margin-right: -15px;
    padding-right: 10px;
    margin-left: 10px;

  }

  .dropdown-submenu:hover > a:after,
  .dropdown-submenu:hover > div > div > a:after {
    border-left-color: map-get(variables.$color-map, 'navbar-dropdown-submenu');
  }

  .dropdown-submenu.pull-left {
    float: none;
  }

  .dropdown-submenu.pull-left > .dropdown-menu,
  .dropdown-submenu.pull-left > div > div > .dropdown-menu {
    left: -100%;
    margin-left: 10px;
    -webkit-border-radius: 6px 0 6px 6px;
    -moz-border-radius: 6px 0 6px 6px;
    border-radius: 6px 0 6px 6px;
  }

  // Dummy selector to keep the same amount of space as submenu arrow
  .dropdown-menu > .dropdown-submenu + li > a::after,
  .dropdown-menu > .dropdown-submenu + li > div > div > a::after {
    content: ' ';
    height: 12px;
    width: 12px;
    margin-left: 10px;
  }

  /*Adding the scroll bar to the menu */
  div.dropdown-menu {
    min-height: 30px;
    // TODO: add scrollbar for y back
    // overflow-x: hidden;
    // overflow-y: auto;
    width: max-content;
    max-width: 450px;

    // Height is set by JS Code
    overflow-y: auto;
  }

  .dropdown .dropdown-toggle,
  .dropdown a {
    text-decoration: none;
  }

  // bootstrap adds css "borders" before element with .dropstart
  .dropstart .dropdown-toggle::before {
    content: none;
  }

  // .dropdown .dropdown-toggle::after {
  //     border-top: 5px solid;
  //     border-right: 5px solid transparent;
  //     border-left: 5px solid transparent;

  //     margin-left: 5px;
  //     vertical-align: middle;
  // }

  .dropdown-menu {
    // To keep it more compact
    min-width: 100px;
    padding: 5px 0;
  }

  // style to override react-bootstrap
  .dropdown-item {
    padding: 0;
  }

  .dropdown-menu > a,
  .dropdown-menu > div > a {
    white-space: normal;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    color: map-get(variables.$color-map, 'black');
    margin-bottom: 2px;
    padding: 3px 15px 3px 15px;
    line-height: 1.4;

    &:focus,
    &:hover {
      color: lighten(map-get(variables.$color-map, 'black'), 10%);
      text-decoration: none;
      background-color: darken(map-get(variables.$color-map, 'white'), 10%);
    }
  }

  .dropdown-menu > li.dropdown-header-container ~ li:not(.dropdown-header-container) > a,
  .dropdown-menu > li.dropdown-header-container ~ li:not(.dropdown-header-container) > div > div > a {
    padding-left: 22px;
  }

  // override bootstrap rule that didn't include '>' so dropstart alway overrode dropend if both present on different elements
  .dropstart > .dropdown-menu[data-bs-popper] {
    top: 0;
    right: 100%;
    left: auto;
    margin: 0px;
  }

  .dropend > .dropdown-menu[data-bs-popper] {
    top: 0;
    right: auto;
    left: 100%;
    margin: 0px;
  }

  .custom-dropdown-submenu {
    // Position fixed is required to align submenu on big screens
    // (since top, left works for position:fixed)
    position: fixed !important;
    right: unset;
  }

  .disable-link {
    pointer-events: none !important;
    cursor: default !important;
    color: map-get(variables.$color-map, 'disabled') !important;

    // the arrow icon
    &:after {
      border-left-color: map-get(variables.$color-map, 'disabled') !important;
    }
  }
}
